generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Plan {
  id     String @id @default(cuid())
  name   String
  tasks  Int
  agents Int
  price  Float

  companies Company[]
}

model Company {
  id     String @id @default(cuid())
  name   String
  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  users   User[]
  teams   Team[]
  tickets Ticket[]
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String
  avatarUrl String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  assignedTickets Ticket[] @relation("AssignedTickets")
}

model Team {
  id   String @id @default(cuid())
  name String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  members User[]
  tickets Ticket[]
}

model Ticket {
  id            String   @id @default(cuid())
  subject       String
  description   String   @db.Text
  customerName  String
  customerEmail String
  status        String
  urgency       String
  category      String
  createdAt     DateTime @default(now())

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  logs TicketLog[]
}

model TicketLog {
  id        String   @id @default(cuid())
  timestamp DateTime
  actor     String // e.g., 'User', 'AI'
  actorName String
  action    String
  details   String   @db.Text

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}
